#!/bin/bash
usage()
{
cat <<EOF
Usage $0:
crypt-editor -help
crypt-editor [filename]
crypt-editor [editor] [filename]
crypt-editor [-k key] [filename]
crypt-editor [-k key] [editor] [filename]

To create new file with mcrypt instead of gpg use -m option
Example:
crypt-editor -m [filename]
EOF
}

ismcrypt=0 # 
while getopts "hkm:" OPTION
do
	case $OPTION in
	h)
		usage
		exit 0
		;;
	k)
		pass=$OPTARG
		editor=$3
		file=$4
		;;
	m)
		echo "using mcrypt instead of gpg"
		ismcrypt=1
		;;
	esac
done

# take password
if [ -z $pass ]
then 
	echo -n "Passphrase: "
	stty -echo
	read pass
	if [ $ismcrypt -eq 0 ] #if -m option is not there
	then
		editor=$1
		file=$2
	else
		editor=$2
		file=$3
	fi
fi

# set editor
if [ ! `type -P $editor` ] || [ -f $editor ]
then
	echo "Setting editor as vi.."
	file=$editor
	editor="vi"
fi
# check for .nc extension
if [ `echo $file| grep ".*\.nc"` ]
then
	file=`expr "$file" : "\(.*\)\.nc"`
fi


# check for .gpg extension
if [ `echo $file| grep ".*\.gpg"` ]
then
	file=`expr "$file" : "\(.*\)\.gpg"`
fi

if [ -f $file.nc ] # decrypt nc
then
	mcrypt -q -k $pass -d $file.nc

	# if password is invalid
	if [ $? -ne 0 ]
	then
		stty sane
		exit 1
	fi

elif [ -f $file.gpg ] # decrypt gpg
then
	echo $pass | gpg --passphrase-fd 0 --yes --no-mdc-warning $file.gpg

	# if password is invalid
	if [ $? -ne 0 ]
	then
		stty sane
		exit 1
	fi
fi

editor_command=`echo $editor| cut -d " " -f1`
case $editor_command in
	gvim) editor="gvim -f"
		;;
	subl) editor="subl -w"
		;;
	sublime-text) editor="sublime-text -w"
		;;
esac
# open decrypted file
$editor $file

# encrypt it again
if [ -f $file ]
then
	if [ $ismcrypt -eq 1 -o -f $file.nc ]
	then
		cat $file | mcrypt -q -k $pass >$file.nc
	else	
		echo $pass | gpg --passphrase-fd 0 --yes -o $file.gpg --symmetric $file
	fi
fi

# remove temporary files
rm $file $file~ *$file.swp 2>/dev/null

stty sane
